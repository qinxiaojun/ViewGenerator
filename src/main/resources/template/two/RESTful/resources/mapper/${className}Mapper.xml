<#include "/macro.include"/>
<#assign className = table.className>
<#assign classNameLower = className?uncap_first>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

    <mapper namespace="${basepackage}.${modulepackage}.dao.${className}Dao">

    <resultMap id="${classNameLower}ResultMap" type="${basepackage}.${modulepackage}.model.${className}">
        <#list table.pkColumns as column>
        <id property="${column.columnNameLower}" column="t_${column.sqlName}" jdbcType="${column.jdbcType}"/>
        </#list>
        <#list table.notPkColumns as column>
        <result property="${column.columnNameLower}" column="t_${column.sqlName}"/>
        </#list>
    </resultMap>

    <sql id="${classNameLower}AliasColumns">
        <#list table.columns as column>
        t.`${column.sqlName}` AS t_${column.sqlName}<#if column_has_next>,</#if>
        </#list>
    </sql>

    <insert id="insert">
        insert into ${table.sqlName}
        (<#list table.columns as column>`${column.sqlName}`<#if column_has_next>,</#if></#list>)
        values
        (<#list table.columns as column>#${r'{'}${column.columnNameLower}${r'}'}<#if column_has_next>,</#if></#list>)
    </insert>

    <insert id="insertIgnoreNull" <#if table.pkColumn.javaType == 'Integer'>useGeneratedKeys="true" keyProperty="id" parameterType="${basepackage}.${modulepackage}.model.${className}"</#if>>
        insert into ${table.sqlName}
        <trim prefix="(" suffix=")" suffixOverrides=",">
        <#list table.columns as column>
            <if test="${column.columnNameLower} != null">
                `${column.sqlName}`,
            </if>
        </#list>
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
        <#list table.columns as column>
            <if test="${column.columnNameLower} != null">
                #${r'{'}${column.columnNameLower}${r'}'},
            </if>
        </#list>
        </trim>
    </insert>

    <update id="update">
        update ${table.sqlName}
        set <#list table.notPkColumns as column>`${column.sqlName}` = #${r'{'}${column.columnNameLower}${r'}'}<#if column_has_next>,</#if></#list>
        where ${table.pkColumn.columnNameLower} = #${r'{'}id${r'}'}
    </update>

    <update id="updateIgnoreNull">
        update ${table.sqlName}
        <trim prefix="SET" suffixOverrides=",">
            <#list table.notPkColumns as column>
            <if test="${column.columnNameLower} != null">
                `${column.sqlName}` = #${r'{'}${column.columnNameLower}${r'}'},
            </if>
            </#list>
        </trim>
        where ${table.pkColumn.columnNameLower} = #${r'{'}id${r'}'}
    </update>

    <delete id="deleteByColumn">
        delete from ${table.sqlName} where ${r"${column}"} = ${r"#{value}"}
    </delete>

    <delete id="batchDelete">
        delete from ${table.sqlName} where ${table.pkColumn.columnNameLower} in
        <foreach collection="array" item="item" separator="," open="(" close=")">
            ${r"#{item}"}
        </foreach>
    </delete>

    <select id="findByColumn" resultMap="${classNameLower}ResultMap">
        SELECT <include refid="${classNameLower}AliasColumns"/> FROM ${table.sqlName} t where t.${r"${column}"} = ${r"#{value}"}
    </select>

    <select id="findList" resultMap="${classNameLower}ResultMap">
        SELECT <include refid="${classNameLower}AliasColumns"/> FROM ${table.sqlName} t
        <trim prefix="WHERE" prefixOverrides="AND | OR">
         <#list table.columns as column>
            <#if searchFields ?eval?size == 0>
            <if test="${column.columnNameLower} != null and ${column.columnNameLower} != ''">
                AND t.${column.sqlName} = #${r'{'}${column.columnNameLower}${r'}'}
            </if>
            </#if>
            <#if searchFields ?eval?size gt 0>
            <#assign counter = 0 >
            <#list searchFields ?eval as searchField>
            <#assign counter =counter+1 >
            <#if searchField.columnSearchType == 'dateDuring' && searchField.columnName == column.columnNameLower>
            <if test="startTime != null and startTime != '' and endTime != null and endTime != ''">
                AND t.${column.sqlName} BETWEEN #${r'{'}startTime${r'}'} AND #${r'{'}endTime${r'}'}
            </if>
            <#break>
            </#if>
            <#if counter == searchFields ?eval?size>
            <if test="${column.columnNameLower} != null and ${column.columnNameLower} != ''">
                AND t.${column.sqlName} like CONCAT('%', #${r'{'}${column.columnNameLower}${r'}'}, '%')
            </if>
            </#if>
        </#list>
        </#if>
        </#list>
        </trim>
    </select>

</mapper>